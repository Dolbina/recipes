{"version":3,"file":"static/js/376.44d21a9f.chunk.js","mappings":"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","sources":["redux/contacts/selector.js","components/GlobalStyle.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Layout/Layout.styled.js","components/Layout/Layout.js","pages/Contacts.js"],"sourcesContent":["export const setContacts = state => state.contacts;\n\nexport const setContactsFilter = state => {\n  const { contacts, filter } = state;\n\n  if (!filter) {\n    return contacts.items;\n  }\n  const filterContacts = contacts.items?.filter(\n    ({ name, number }) =>\n      name?.trim().toLowerCase().includes(filter.toLowerCase()) ||\n      number?.trim().includes(filter.toLowerCase())\n  );\n\n  return filterContacts;\n};\n\nexport const setFilter = state => state.filter;\n\nexport const setIsLoading = state => state.isLoading;\nexport const setError = state => state.error;\n","import { createGlobalStyle } from 'styled-components';\nimport 'modern-normalize';\n\nexport const GlobalStyle = createGlobalStyle`\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\np {\n  margin: 0;\n}\nul, ol {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n`;\n\n","import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikErrorMessage } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  width: 300px;\n  padding: 20px;\n  border: 1px solid gray;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  font-size: 10px;\n  color: red;\n`;\n\nexport const ButtonWrapForm = styled.button`\n \n  border: 0px solid gray;\n  border-radius: 1px;\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n  &:hover {\n    background-color: aqua;\n    cursor: pointer;\n    transition: all 0.3s ease-in-out;\n  }\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Field } from 'formik';\n\nimport * as yup from 'yup';\n\nimport {\n  FormField,\n  Form,\n  ErrorMessage,\n  ButtonWrapForm,\n} from './ContactForm.styled';\nimport { addContact } from 'redux/contacts/operations';\nimport { setContacts } from 'redux/contacts/selector';\n\nconst contactSchema = yup.object().shape({\n  name: yup\n    .string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d`Artagnan'\n    )\n    .required(),\n  number: yup\n    .string()\n    .trim()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(setContacts);\n  const dispatch = useDispatch();\n\n  const isIncludes = ({ name, number }) => {\n    const nameUpdate = name ? name.toLowerCase().trim() : '';\n    const numberUpdate = number ? number.trim() : '';\n\n    const includes = contacts.items.find(\n      contact =>\n        (contact.name && contact.name.toLowerCase().trim() === nameUpdate) ||\n        (contact.number && contact.number.trim() === numberUpdate)\n    );\n    return Boolean(includes);\n  };\n\n  const addContactPlus = ({ name, number }) => {\n    if (isIncludes({ name, number })) {\n      return alert(`${name}: is already in contacts`);\n    }\n    dispatch(addContact({ name, number }));\n  };\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={contactSchema}\n      onSubmit={(values, actions) => {\n        addContactPlus({ ...values });\n        actions.resetForm();\n      }}\n    >\n      <Form autoComplete=\"off\">\n        <FormField>\n          Name\n          <Field\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </FormField>\n        <FormField>\n          Number\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </FormField>\n        <ButtonWrapForm type=\"submit\">Add contact</ButtonWrapForm>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  padding: 0px 20px 20px 20px;\n`;\n\n\n\n","import { FilterWrap } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filtersContact } from 'redux/contacts/filtersSlice';\nimport { setFilter } from 'redux/contacts/selector';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(setFilter);\n  return (\n    <FilterWrap>\n      <label> Find contacts by name</label>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={event => dispatch(filtersContact(event.target.value.trim()))}\n        placeholder=\"search\"\n      />\n    </FilterWrap>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListWrap = styled.ul`\n    flex-direction: column;\n    display: flex;\n    gap: 12px;\n\n`;\n\nexport const ButtonWrap = styled.button`\n  margin-left: 20px;\n  border: 0px solid gray;\n  border-radius: 1px;\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n  &:hover {\n    background-color: aqua;\n    cursor: pointer;\n    transition: all 0.3s ease-in-out;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport { ListWrap, ButtonWrap } from './ContactList.styled';\nimport { deleteContact, fetchContacts } from 'redux/contacts/operations';\nimport {\n  setContactsFilter,\n  setIsLoading,\n  setError,\n} from 'redux/contacts/selector';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(setIsLoading);\n  const error = useSelector(setError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = useSelector(setContactsFilter);\n\n  if (!filteredContacts?.length) {\n    return <p>No contacts found.</p>;\n  }\n  return (\n    <ListWrap>\n      {isLoading && !error && <b>Request in progress...</b>}\n      {filteredContacts.map(({ id, name, number }) => (\n        <li key={id}>\n          {name}: {number}\n          <ButtonWrap type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            Delete\n          </ButtonWrap>\n        </li>\n      ))}\n    </ListWrap>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin: 0 auto;\n  padding: 20px;\n`;\n","import { Container } from './Layout.styled';\n\nexport const Layout = ({ children }) => {\n  return <Container>{children}</Container>;\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport { setIsLoading } from 'redux/contacts/selector';\nimport { GlobalStyle } from '../components/GlobalStyle';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Layout } from 'components/Layout/Layout';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(setIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Layout>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <div>\n          <div>{isLoading && 'Request in progress...'}</div>\n          <ContactList />\n        </div>\n        <GlobalStyle />\n      </Layout>\n    </>\n  );\n}\n"],"names":["setContacts","state","contacts","setContactsFilter","filter","items","name","number","trim","toLowerCase","includes","setFilter","setIsLoading","isLoading","setError","error","GlobalStyle","createGlobalStyle","Form","styled","FormikForm","FormField","ErrorMessage","FormikErrorMessage","ButtonWrapForm","contactSchema","yup","shape","matches","required","ContactForm","useSelector","dispatch","useDispatch","addContactPlus","nameUpdate","numberUpdate","find","contact","Boolean","isIncludes","alert","addContact","initialValues","validationSchema","onSubmit","values","actions","resetForm","autoComplete","pattern","title","component","type","FilterWrap","Filter","value","onChange","event","filtersContact","target","placeholder","ListWrap","ButtonWrap","ContactList","useEffect","fetchContacts","filteredContacts","length","map","id","onClick","deleteContact","Container","Layout","children","Contacts","Helmet"],"sourceRoot":""}